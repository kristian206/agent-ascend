rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isGod() {
      return isAuthenticated() && 
        request.auth.token.email == 'kristian.suson@gmail.com';
    }
    
    // Check if user is member of a team
    function isTeamMember(teamId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teams/$(teamId)) &&
        request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members;
    }
    
    // Check if user is leader of a team
    function isTeamLeader(teamId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teams/$(teamId)) &&
        request.auth.uid == get(/databases/$(database)/documents/teams/$(teamId)).data.leaderId;
    }
    
    // Check if user is co-leader of a team
    function isTeamCoLeader(teamId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teams/$(teamId)) &&
        request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.coLeaders;
    }
    
    // Check if user has any leadership role
    function isTeamLeadership(teamId) {
      return isTeamLeader(teamId) || isTeamCoLeader(teamId);
    }
    
    // Get user's team ID from members collection
    function getUserTeamId(userId) {
      return get(/databases/$(database)/documents/members/$(userId)).data.teamId;
    }
    
    // Check if users are on the same team
    function areTeammates(userId1, userId2) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/members/$(userId1)) &&
        exists(/databases/$(database)/documents/members/$(userId2)) &&
        get(/databases/$(database)/documents/members/$(userId1)).data.teamId == 
        get(/databases/$(database)/documents/members/$(userId2)).data.teamId;
    }
    
    // ============================================
    // USER PROFILE COLLECTIONS
    // ============================================
    
    // Users collection - PRIMARY user profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isGod();
      allow delete: if isGod();
    }
    
    // Members collection - EXTENDED user data
    match /members/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isGod();
      allow delete: if isGod();
    }
    
    // ============================================
    // TEAM MANAGEMENT COLLECTIONS
    // ============================================
    
    // Teams collection
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.leaderId == request.auth.uid;
      allow update: if isTeamLeader(teamId) || isGod();
      allow delete: if isTeamLeader(teamId) || isGod();
    }
    
    // Team Goals collection
    match /teamGoals/{goalId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (isTeamLeadership(resource.data.teamId) || isGod());
      allow delete: if isGod();
    }
    
    // Member Goals collection (individual targets within team goals)
    match /memberGoals/{goalId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (resource.data.memberId == request.auth.uid || 
         isTeamLeadership(get(/databases/$(database)/documents/teamGoals/$(resource.data.teamGoalId)).data.teamId) ||
         isGod());
      allow delete: if isGod();
    }
    
    // Goal Progress collection
    match /goalProgress/{progressId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.memberId == request.auth.uid;
      allow update: if isAuthenticated() &&
        (resource.data.memberId == request.auth.uid || isGod());
      allow delete: if isGod();
    }
    
    // ============================================
    // SEASON & COMPETITION COLLECTIONS
    // ============================================
    
    // Seasons collection
    match /seasons/{seasonId} {
      allow read: if isAuthenticated();
      allow create: if isGod();
      allow update: if isGod();
      allow delete: if isGod();
    }
    
    // User Seasons collection (seasonal progress)
    match /userSeasons/{userSeasonId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isGod());
      allow delete: if isGod();
    }
    
    // Lifetime Progression collection
    match /lifetimeProgression/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isGod();
      allow delete: if isGod();
    }
    
    // Daily Activities collection (for tracking daily points)
    match /dailyActivities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isGod();
    }
    
    // ============================================
    // ACTIVITY & PERFORMANCE COLLECTIONS
    // ============================================
    
    // Activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if isGod();
    }
    
    // Check-ins collection
    match /checkins/{checkinId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (checkinId.matches('.*_.*') && 
         checkinId.split('_')[0] == request.auth.uid);
      allow delete: if isGod();
    }
    
    // Daily Intentions collection
    match /dailyIntentions/{intentionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isGod();
    }
    
    // Nightly Wraps collection
    match /nightlyWraps/{wrapId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isGod();
    }
    
    // ============================================
    // SALES & BUSINESS COLLECTIONS
    // ============================================
    
    // Sales collection
    match /sales/{saleId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid ||
         (exists(/databases/$(database)/documents/members/$(resource.data.userId)) &&
          isTeamLeadership(get(/databases/$(database)/documents/members/$(resource.data.userId)).data.teamId)) ||
         isGod());
      allow delete: if isGod();
    }
    
    // Monthly Totals collection
    match /monthlyTotals/{totalId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isGod();
    }
    
    // ============================================
    // NOTIFICATION & COMMUNICATION COLLECTIONS
    // ============================================
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource == null || 
         resource.data.recipientId == request.auth.uid ||
         resource.data.senderId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid;
    }
    
    // ============================================
    // LEADERBOARD & STATS COLLECTIONS
    // ============================================
    
    // Leaderboard collection
    match /leaderboard/{entry} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if false;
    }
    
    // User Stats collection
    match /userStats/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isGod();
      allow delete: if false;
    }
    
    // Team Stats collection
    match /teamStats/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Team Activities collection
    match /teamActivities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if isGod();
    }
    
    // ============================================
    // GAMIFICATION COLLECTIONS
    // ============================================
    
    // Achievements collection
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow create: if isGod();
      allow update: if isGod();
      allow delete: if isGod();
    }
    
    // Badges collection
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      allow create: if isGod();
      allow update: if isGod();
      allow delete: if isGod();
    }
    
    // ============================================
    // SYSTEM & CONFIGURATION COLLECTIONS
    // ============================================
    
    // Config collection
    match /config/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isGod();
    }
    
    // Settings collection
    match /settings/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isGod();
    }
    
    // Audit logs
    match /audit/{logId} {
      allow read: if isGod();
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
    
    // Rate limits (Cloud Functions only)
    match /rateLimits/{limitId} {
      allow read: if false;
      allow write: if false;
    }
    
    // ============================================
    // CATCH-ALL RULE
    // ============================================
    
    // Default deny for any unmatched collections
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}